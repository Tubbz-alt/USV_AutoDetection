function sound = PRBA_set_time_stamps(sound)

% ASE_Utils_set_time_stamps - compute
%
% Add time stamps to a sound; runs on a batch of Sounds
%  in contrast to an earlier Attribute action that needed to
%  be run by hand on each sound
% After creating time stamps, runs a cleanup operation
%  based on Mike Pitzrick's Time Stamps Repair action
%  to eliminate unneeded time stamps (more details below)
% Also sets the Hide Silence option to ON (1) for each sound
%
% Chris Pelkie 2011-01-31
%  building on prototype by Ann Warde 2011-01
%  stealing lots of ideas from Mike Pitzrick's
%   code for Set Date-Time Attribute
%
%  Mike Pitzrick 20110211
%    adapt Chris Pelkie's "Set Time Stamps Attribute sound action


% we're going to assume these are Beast'ed AIFs so the pattern
%  'yyyymmdd_HHMMSS' is the normal one for DATE_TIME
time_stamps.table = ...
    get_schedule_from_files(sound, 'yyyymmdd_HHMMSS');

% not sure what happens if nothing is returned from the prior call
% needs to be tested
orig_table = time_stamps.table;

% eliminate redundant lines introduced by Beast time dilation.
% Mike P says this can eliminate a lot of bogus time stamps
% that slow XBAT down if present in large numbers.
% The test is to calculate the difference of differences
% of the sound_time and stamp_time on successive entries (rows).
% If the difference of differences is ~0, the implication is that
% XBAT created an unnecessary time stamp for the same recording.
% When the difference of differences is > 1, the implication is
% that we have reached the time stamp for the next recording.
% The problem arises because XBAT time stamps are generated
% based on number of samples per recorded file and this varies
% from the theoretical number = recording length *
% sample rate, because Beast adds or subtracts samples but creates
% filenames accurate only to the second.
% XBAT parses the actual number of samples and if the number is
% not the same as the previous sample, another time stamp is
% generated; XBAT does not use the DATE_TIME in the filename.
% One more gotcha, XBAT occasionally writes a float value which
% does not evaluate the same as the integer of same, so we have
% to do a bit of rounding to trap other inequalities of small
% size.
%
orig_len = size(orig_table, 1);

% disp(' ')
% disp('*******************************************************************')
% disp(' ')

if orig_len < 2
%   fprintf(1,'Note: Sound is not a duty cycle recording.\n');
  return;
  
% else
%   fprintf(1,'Note: Sound is a duty cycle recording.\n');
end

% fprintf(1,'  %s\n\n', sound_name(sound));
% disp(' ')
% disp('*******************************************************************')
% disp(' ')

% preallocate matrix
trimmed_table = zeros(size(orig_table));
% scratch_table used during testing
% scratch_table = zeros(length(orig_table),2);

% if (orig_len > 1)
    % start by doing the first entry
    current_diff = orig_table(1, 2) - orig_table(1, 1);
    % scratch_table(1,1) = current_diff;
    trimmed_table(1, :) = orig_table(1, :);
    trimmed_index = 2;
    
    for i = 2:orig_len
        prev_diff    = current_diff;
        current_diff = orig_table(i, 2) - orig_table(i, 1);        
        rounded_diff = int32(abs(current_diff - prev_diff));
        
        % scratch_table(i,:) = [current_diff, rounded_diff];
        
        % we check to see if the difference of
        % differences is greater than 1 (second).
        % if not, it's probably due to floating point
        % round-off and we're not interested in
        % retaining this time stamp
        if (rounded_diff > 1)
            % add this orig_table row to trimmed_table
            trimmed_table(trimmed_index, :) = orig_table(i, :);
            trimmed_index = trimmed_index + 1;
        end
    end
% end

% chop off unused preallocated entries
table = trimmed_table(1:trimmed_index-1, :);

%update attributes in sound struc variable
sound.time_stamp.table = table;
sound.time_stamp.enable = 1;
sound.time_stamp.collapse = 1;

flag = 0;

for i = 1:length(sound.attributes)
  if strcmpi(sound.attributes(i).name, 'time_stamps')
    sound.attributes(i).value.table = table;
    flag = 1;
  end
end

if ~flag
  time_stamp.name = 'time_stamps';
  time_stamp.value.table = table; 
  sound.attributes = [sound.attributes, time_stamp];
end

%% Update time-stamps.csv

% % convert time stamp table to CSV strings
% trimmed_len = length(table);
% % preallocate cell array
% lines = cell(trimmed_len+2, 1);
% % write literal header lines
% lines{1} = 'sound time, stamp time';
% lines{2} = 'stamps';
% % write strings for CSV comma-delimited format
% for i = 1:trimmed_len
%     lines{i + 2} = ...
%         [num2str(table(i, 1)), ', ' num2str(table(i, 2))];
% end
% 
% % if no '__XBAT\Attributes\' directory, then create
% sPath = sound.path;
% if ~exist([sPath '__XBAT\Attributes'], 'dir')
%     mkdir([sPath '__XBAT\Attributes']);
% end
% 
% % write time_stamps.csv
% store = [sound.path '__XBAT\Attributes\time_stamps.csv'];
% file_writelines(store, lines);
